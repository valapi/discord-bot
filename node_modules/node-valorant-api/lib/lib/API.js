"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _accountRegion, _key, _originalRegion, _region;
Object.defineProperty(exports, "__esModule", { value: true });
exports.API = void 0;
const axios_1 = __importDefault(require("axios"));
const Regions_1 = require("./Regions");
const riot_1 = require("./riot");
const valorant_1 = require("./valorant");
const ResponseInterpreter = (response) => {
    return response.data;
};
const ErrorInterpreter = (error) => {
    var _a, _b, _c;
    const { method, path, _header, res } = error.request;
    switch (error.response.status) {
        case 400:
        case 401:
        case 403:
        case 404:
        case 405:
        case 415:
        case 429:
        case 500:
        case 502:
        case 503:
        case 504:
            return Promise.reject({
                request: {
                    method,
                    path,
                    header: _header,
                    url: res.responseUrl,
                },
                status_code: error.response.status,
                message: error.response.data.status.message,
            });
        default:
            return Promise.reject({
                request: {
                    method,
                    path,
                    header: _header,
                    url: res.responseUrl,
                },
                status_code: error.response.status,
                message: ((_c = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.status) === null || _c === void 0 ? void 0 : _c.message) || 'Unknown Error',
            });
    }
};
class API {
    /**
     * @constructor
     *
     * @param {Region} region Target Region: APAC | BR | EU | KR | LATAM | NA | PBE1
     * @param {string} key The API Key registered at https://developer.riotgames.com/
     * @param {Region} accountRegion Target Region for Account API: AMERICAS | ASIA | EUROPE
     * @return {this} the API instance
     */
    constructor(region, key, accountRegion) {
        this.AccountV1 = new riot_1.AccountV1(this);
        this.ContentV1 = new valorant_1.ContentV1(this);
        this.MatchV1 = new valorant_1.MatchV1(this);
        this.StatusV1 = new valorant_1.StatusV1(this);
        this.RankedV1 = new valorant_1.RankedV1(this);
        _accountRegion.set(this, void 0);
        _key.set(this, '');
        _originalRegion.set(this, null);
        _region.set(this, void 0);
        if (region === null) {
            throw new Error('No region is classified');
        }
        if (key.length === 0) {
            throw new Error('No key is classified');
        }
        if (accountRegion === undefined) {
            __classPrivateFieldSet(this, _accountRegion, Regions_1.Regions.AMERICAS);
        }
        else {
            __classPrivateFieldSet(this, _accountRegion, accountRegion);
        }
        __classPrivateFieldSet(this, _region, region);
        __classPrivateFieldSet(this, _key, key);
    }
    get accountRequest() {
        const request = axios_1.default.create({
            baseURL: `https://${__classPrivateFieldGet(this, _accountRegion).endpoint}.api.riotgames.com/`,
            headers: {
                'X-Riot-Token': __classPrivateFieldGet(this, _key),
                'Content-Type': 'application/json;charset=UTF-8',
            },
        });
        request.interceptors.response.use(ResponseInterpreter, ErrorInterpreter);
        return request;
    }
    get request() {
        const request = axios_1.default.create({
            baseURL: `https://${__classPrivateFieldGet(this, _region).endpoint}.api.riotgames.com/`,
            headers: {
                'X-Riot-Token': __classPrivateFieldGet(this, _key),
                'Content-Type': 'application/json;charset=UTF-8',
            },
        });
        request.interceptors.response.use(ResponseInterpreter, ErrorInterpreter);
        return request;
    }
    /**
     * The target region when querying the API
     */
    get region() {
        return __classPrivateFieldGet(this, _region);
    }
    /**
     * The target region when querying the API
     */
    get accountRegion() {
        return __classPrivateFieldGet(this, _accountRegion);
    }
}
exports.API = API;
_accountRegion = new WeakMap(), _key = new WeakMap(), _originalRegion = new WeakMap(), _region = new WeakMap();
