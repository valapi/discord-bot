"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountV1 = void 0;
const Controller_1 = __importDefault(require("../Controller"));
const Regions_1 = require("../Regions");
const regionToAccountRegion = (region) => {
    switch (region) {
        case Regions_1.Regions.APAC:
        case Regions_1.Regions.KR:
        case Regions_1.Regions.ASIA:
            return Regions_1.Regions.ASIA;
        case Regions_1.Regions.BR:
        case Regions_1.Regions.NA:
        case Regions_1.Regions.LATAM:
        case Regions_1.Regions.PBE1:
            return Regions_1.Regions.AMERICAS;
        case Regions_1.Regions.EU:
        case Regions_1.Regions.EUROPE:
            return Regions_1.Regions.EUROPE;
        default:
            throw new Error('Invalid Region');
    }
};
class AccountV1 extends Controller_1.default {
    getAccountByPuuid(puuid) {
        puuid = encodeURIComponent(puuid);
        return this.accountRequest.get(`/riot/account/v1/accounts/by-puuid/${puuid}`);
    }
    getAccountByRiotID(gameName, tagLine) {
        gameName = encodeURIComponent(gameName);
        tagLine = encodeURIComponent(tagLine);
        return this.accountRequest.get(`/riot/account/v1/accounts/by-riot-id/${gameName}/${tagLine}`);
    }
    getActiveShardByPuuid(puuid) {
        puuid = encodeURIComponent(puuid);
        return this.accountRequest.get(`/riot/account/v1/active-shards/by-game/val/by-puuid/${puuid}`);
    }
}
exports.AccountV1 = AccountV1;
