"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RiotClient = void 0;
//import
const lib_1 = require("@valapi/lib");
const AxiosClient_1 = require("./AxiosClient");
const lockfile_1 = require("../auth/lockfile");
const process_1 = require("process");
const https_1 = require("https");
const Chat_1 = require("../service/Chat");
const Main_1 = require("../service/Main");
const More_1 = require("../service/More");
const _defaultConfig = {
    ip: '127.0.0.1',
    path: `${String(process_1.env.LOCALAPPDATA)}/Riot Games/Riot Client/Config/lockfile`,
    username: 'riot',
    axiosConfig: {},
};
//class
/**
 * All Api Base On https://github.com/techchrism/valorant-api-docs
 */
class RiotClient extends lib_1.CustomEvent {
    /**
     * @param {RiotLocalConfig} config Config
     */
    constructor(config = {}) {
        super();
        this.config = new Object(Object.assign(Object.assign({}, _defaultConfig), config));
        this.lockfile = {
            name: 'Riot Client',
            pid: 0,
            port: 0,
            password: '',
            protocol: 'https',
        };
        //first reload
        const _base64 = (0, lib_1.toUft8)(`${this.config.username}:${this.lockfile.password}`);
        const _axiosConfig = {
            httpAgent: new https_1.Agent({ keepAlive: true, rejectUnauthorized: false }),
            httpsAgent: new https_1.Agent({ keepAlive: true, rejectUnauthorized: false }),
            headers: {
                'Authorization': `Basic ${_base64}`,
            },
            baseURL: `${this.lockfile.protocol}://${this.config.ip}:${this.lockfile.port}`,
        };
        this.AxiosClient = new AxiosClient_1.AxiosClient(new Object(Object.assign(Object.assign({}, _axiosConfig), this.config.axiosConfig)));
        this.AxiosClient.on('error', ((data) => { this.emit('error', data); }));
        this.AxiosClient.on('request', ((data) => { this.emit('request', data); }));
        this.Chat = new Chat_1.Chat(this.AxiosClient);
        this.Main = new Main_1.Main(this.AxiosClient);
        this.More = new More_1.More(this.AxiosClient);
        //evet
        this.emit('ready');
    }
    /**
     * @returns {void}
     */
    reload() {
        const _base64 = (0, lib_1.toUft8)(`${this.config.username}:${this.lockfile.password}`);
        const _axiosConfig = {
            httpAgent: new https_1.Agent({ keepAlive: true, rejectUnauthorized: false }),
            httpsAgent: new https_1.Agent({ keepAlive: true, rejectUnauthorized: false }),
            headers: {
                'Authorization': `Basic ${_base64}`,
            },
            baseURL: `${this.lockfile.protocol}://${this.config.ip}:${this.lockfile.port}`,
        };
        this.AxiosClient = new AxiosClient_1.AxiosClient(new Object(Object.assign(Object.assign({}, _axiosConfig), this.config.axiosConfig)));
        this.AxiosClient.on('error', ((data) => { this.emit('error', data); }));
        this.AxiosClient.on('request', ((data) => { this.emit('request', data); }));
        this.Chat = new Chat_1.Chat(this.AxiosClient);
        this.Main = new Main_1.Main(this.AxiosClient);
        this.More = new More_1.More(this.AxiosClient);
        //event
        this.emit('ready');
    }
    // AUTH //
    /**
    * @returns {void}
    */
    LockfileAuth() {
        var _getLockfile;
        try {
            _getLockfile = (0, lockfile_1.getLockfile)(String(this.config.path));
        }
        catch (err) {
            this.emit('error', {
                errorCode: 'RiotLocal_Authentication_Error',
                message: 'Lockfile Not Found',
                data: err,
            });
            return;
        }
        this.lockfile = _getLockfile;
        this.reload();
    }
    // SETTINGS //
    /**
     *
     * @param {String} ip IP of local api
     * @returns {void}
     */
    setIp(ip = '127.0.0.1') {
        this.config.ip = ip;
        this.emit('changeSettings', { name: 'ip', data: ip });
        this.reload();
    }
    /**
     *
     * @param {String} username Username
     * @returns {void}
     */
    setUsername(username = 'riot') {
        this.config.username = username;
        this.emit('changeSettings', { name: 'username', data: username });
        this.reload();
    }
    /**
     * @param {String} lockfile Lockfile
     * @returns {void}
     */
    setLockfile(lockfile) {
        this.lockfile = lockfile;
        this.emit('changeSettings', { name: 'lockfile', data: lockfile });
        this.reload();
    }
}
exports.RiotClient = RiotClient;
//# sourceMappingURL=Client.js.map