import { CustomEvent, type ValorantAPIError } from '@valapi/lib';
import type { AxiosRequestConfig } from 'axios';
import { type RiotLocalAxiosRequest } from "./AxiosClient";
import { Chat as ChatService } from '../service/Chat';
import { Main as MainService } from '../service/Main';
import { More as MoreService } from '../service/More';
declare type RiotLocalProtocol = 'http' | 'https';
interface RiotLocalLockfile {
    name: string;
    pid: number;
    port: number;
    password: string;
    protocol: RiotLocalProtocol;
}
interface RiotLocalConfig {
    ip?: string;
    path?: string;
    username?: string;
    axiosConfig?: AxiosRequestConfig;
}
/**
 * All Api Base On https://github.com/techchrism/valorant-api-docs
 */
declare class RiotClient extends CustomEvent {
    protected config: RiotLocalConfig;
    protected lockfile: RiotLocalLockfile;
    private AxiosClient;
    Chat: ChatService;
    Main: MainService;
    More: MoreService;
    /**
     * @param {RiotLocalConfig} config Config
     */
    constructor(config?: RiotLocalConfig);
    /**
     * @returns {void}
     */
    private reload;
    /**
    * @returns {void}
    */
    LockfileAuth(): void;
    /**
     *
     * @param {String} ip IP of local api
     * @returns {void}
     */
    setIp(ip?: string): void;
    /**
     *
     * @param {String} username Username
     * @returns {void}
     */
    setUsername(username?: string): void;
    /**
     * @param {String} lockfile Lockfile
     * @returns {void}
     */
    setLockfile(lockfile: RiotLocalLockfile): void;
}
interface RiotLocalClientEvent {
    'ready': () => void;
    'request': (data: RiotLocalAxiosRequest) => void;
    'changeSettings': (data: {
        name: string;
        data: any;
    }) => void;
    'error': (data: ValorantAPIError) => void;
}
declare interface RiotClient {
    emit<EventName extends keyof RiotLocalClientEvent>(name: EventName, ...args: Parameters<RiotLocalClientEvent[EventName]>): void;
    on<EventName extends keyof RiotLocalClientEvent>(name: EventName, callback: RiotLocalClientEvent[EventName]): void;
    once<EventName extends keyof RiotLocalClientEvent>(name: EventName, callback: RiotLocalClientEvent[EventName]): void;
    off<EventName extends keyof RiotLocalClientEvent>(name: EventName, callback?: RiotLocalClientEvent[EventName]): void;
}
export { RiotClient };
export type { RiotLocalProtocol, RiotLocalLockfile, RiotLocalConfig, RiotLocalClientEvent };
//# sourceMappingURL=Client.d.ts.map