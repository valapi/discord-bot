"use strict";
//import
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chat = void 0;
//service
class Chat {
    constructor(data) {
        this.AxiosClient = data;
    }
    //functions
    All_Chat_History() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v6/messages`);
        });
    }
    All_Chat_Info() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v6/info/conversations/`);
        });
    }
    All_Chat_Participants() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v5/participants/`);
        });
    }
    Game_Chat_Info() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v6/conversations/ares-coregame`);
        });
    }
    Party_Chat_Info() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v6/conversations/ares-parties`);
        });
    }
    Pregame_Chat_Info() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v6/conversations/ares-pregame`);
        });
    }
    Specific_Chat_History(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v6/messages?cid=${chatId}`);
        });
    }
    Text_Chat_RNet_FetchParticipants(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get(`/chat/v5/participants/?cid=${chatId}`);
        });
    }
    Send_Chat(chatId, message) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.post(`/chat/v6/messages/`, {
                "cid": chatId,
                "message": message,
                "type": "groupchat"
            });
        });
    }
    Send_Whisper(chatId, message) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.post(`/chat/v6/messages/`, {
                "cid": chatId,
                "message": message,
                "type": "chat"
            });
        });
    }
}
exports.Chat = Chat;
//# sourceMappingURL=Chat.js.map