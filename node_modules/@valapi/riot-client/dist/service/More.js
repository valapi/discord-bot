"use strict";
//import
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.More = void 0;
//service
class More {
    constructor(data) {
        this.AxiosClient = data;
    }
    //functions
    ANTI_ADDICTION_RNet_FetchShutdownPolicyState() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/anti-addiction/v1/products/valorant/policies/shutdown/anti-addiction-state');
        });
    }
    ANTI_ADDICTION_RNet_FetchWarningMessagePolicyState() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/anti-addiction/v1/products/valorant/policies/warningMessage/anti-addiction-state');
        });
    }
    CLIENTCONFIG_RNET_GET_ValorantClientConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/client-config/v2/namespace/valorant.client/player');
        });
    }
    LEGAL_INFO_RNet_EULA() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/eula/v1/agreement/content');
        });
    }
    LEGAL_INFO_RNet_Privacy() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/eula/v1/privacy-policy/content');
        });
    }
    LOCALE_RNet_FetchAvailableLocales() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/rnet-product-registry/v4/available-product-locales/products/valorant/patchlines/live');
        });
    }
    LOCALE_RNet_FetchLocale() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/RiotLocal/product-locales/products/valorant/patchlines/live');
        });
    }
    Local_Swagger_Docs() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/swagger/v3/openapi.json');
        });
    }
    REPORTER_FEEDBACK_RNet_GetReporterFeedback() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/player-reporting/v1/reporter-feedback');
        });
    }
    RIOT_WARNING_RNet_GetRiotWarning() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/ga-warning/v1/warnings');
        });
    }
    RSO_RNet_FetchClientAuthorizations() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/rso-auth/v2/authorizations/valorant-client');
        });
    }
    RSO_RNet_GetAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/rso-auth/v1/authorization/access-token');
        });
    }
    RSO_RNet_GetUserInfoToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/rso-auth/v1/userinfo/valorant-client');
        });
    }
    Riot_Client_Command_Line_Args() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/RiotLocal/command-line-args');
        });
    }
    RiotStatus_RNet_FetchStatus(region) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/riot-status/v1/products/valorant/patchlines/live/deployments/' + region);
        });
    }
    TEXT_CHAT_RNet_FetchSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/chat/v1/settings');
        });
    }
    TEXT_CHAT_RNet_FetchSettings_coregame() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/chat/v6/conversations/ares-coregame');
        });
    }
    TEXT_CHAT_RNet_GetMUCInfos_parties() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/chat/v6/conversations/ares-parties');
        });
    }
    TEXT_CHAT_RNet_GetMUCInfos_pregame() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/chat/v6/conversations/ares-pregame');
        });
    }
    TEXT_CHAT_RNet_GetMUCInfos_tournaments() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/chat/v6/conversations/ares-tournaments');
        });
    }
    URNetClient_CheckPluginStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/plugin-manager/v1/status');
        });
    }
    URNetClient_CheckRMSSession() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/riot-messaging-service/v1/session');
        });
    }
    URNetClient_GetProcessInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/process-control/v1/process');
        });
    }
    VOICE_CHAT_RNet_FetchAudioProperties() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/voice-chat/v1/audio-properties');
        });
    }
    VOICE_CHAT_RNet_FetchCaptureDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/voice-chat/v2/devices/capture');
        });
    }
    VOICE_CHAT_RNet_FetchPTTSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/voice-chat/v2/push-to-talk/valorant');
        });
    }
    VOICE_CHAT_RNet_FetchRenderDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/voice-chat/v2/devices/render');
        });
    }
    VOICE_CHAT_RNet_FetchSessions() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/voice-chat/v3/sessions/valorant');
        });
    }
    VOICE_CHAT_RNet_FetchSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/voice-chat/v3/settings/valorant');
        });
    }
    Valorant_Log_Path() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AxiosClient.get('/product-session/v1/logs/path/VALORANT');
        });
    }
}
exports.More = More;
//# sourceMappingURL=More.js.map