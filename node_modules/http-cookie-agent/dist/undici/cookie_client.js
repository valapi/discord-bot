"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CookieClient = void 0;
exports.createCookieClient = createCookieClient;

var _toughCookie = require("tough-cookie");

var _undici = require("undici");

var _symbols = require("undici/lib/core/symbols");

var _redirect = require("undici/lib/handler/redirect");

var _cookie_handler = require("./cookie_handler");

var _convert_to_headers_object = require("./utils/convert_to_headers_object");

var _validate_cookie_options = require("./utils/validate_cookie_options");

const kCookieOptions = Symbol('cookieOptions');
const kAppendCookieHeader = Symbol('appendCookieHeader');

function createCookieClient(BaseClientClass) {
  // @ts-expect-error ...
  class CookieClient extends BaseClientClass {
    constructor(url, {
      cookies: cookieOpts,
      ...options
    } = {}) {
      super(url, options);

      if (cookieOpts) {
        (0, _validate_cookie_options.validateCookieOptions)(cookieOpts);
        this[kCookieOptions] = cookieOpts;
      }
    }

    [_symbols.kDispatch](opts, handler) {
      const {
        maxRedirections = this[_symbols.kMaxRedirections]
      } = opts;

      if (maxRedirections) {
        opts = { ...opts,
          maxRedirections: 0
        };
        handler = new _redirect.RedirectHandler(this, maxRedirections, opts, handler);
      }

      const cookieOptions = this[kCookieOptions];

      if (cookieOptions) {
        const origin = opts.origin || this[_symbols.kUrl].origin;
        const requestUrl = new URL(opts.path, origin).toString();
        const headers = this[kAppendCookieHeader](requestUrl, (0, _convert_to_headers_object.convertToHeadersObject)(opts.headers), cookieOptions);
        opts = { ...opts,
          headers
        };
        handler = new _cookie_handler.CookieHandler(requestUrl, cookieOptions, handler);
      }

      return super[_symbols.kDispatch](opts, handler);
    }

    [kAppendCookieHeader](requestUrl, _headers, cookieOpts) {
      const {
        async_UNSTABLE = false,
        jar
      } = cookieOpts;
      const headers = { ..._headers
      };
      const getCookiesSync = async_UNSTABLE ? // eslint-disable-next-line @typescript-eslint/no-var-requires
      require('deasync')(jar.getCookies.bind(jar)) : jar.getCookiesSync.bind(jar);
      const cookies = getCookiesSync(requestUrl);
      const cookiesMap = new Map(cookies.map(cookie => [cookie.key, cookie]));

      if (typeof headers['cookie'] === 'string') {
        for (const str of headers['cookie'].split(';')) {
          const cookie = _toughCookie.Cookie.parse(str.trim());

          if (cookie != null) {
            cookiesMap.set(cookie.key, cookie);
          }
        }
      }

      headers['cookie'] = Array.from(cookiesMap.values()).map(cookie => cookie.cookieString()).join(';\x20');
      return headers;
    }

  }

  return CookieClient;
}

const CookieClient = createCookieClient(_undici.Client);
exports.CookieClient = CookieClient;